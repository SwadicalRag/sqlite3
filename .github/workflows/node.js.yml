# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-latest]
        node-version: [18.x]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present

      - name: Setup MSVC Dev Env
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build sqlite3
        run: npm run build-sqlite

      - name: Run Tests
        run: npm run test

      # - name: Release
      #   if: ${{ github.ref == 'refs/heads/main' }}
      #   uses: softprops/action-gh-release@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: "Release Draft"
      #     draft: true
      #     files: |
      #       build/libsqlite3_x64.so
      #       build/libsqlite3_x64.dylib
      #       build/sqlite3_x64.dll

      - name: Push Binaries
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-artifact@v3
        with:
          name: sqlite3-win
          path: build/sqlite3_x64.dll
          name: sqlite3-mac
          path: build/libsqlite3_x64.dylib
          name: sqlite3-linux
          path: build/libsqlite3_x64.so
